name: Continuous integration

on:
  push:
    branches:
      - master
      - '[0-9]+.[0-9]+'
    tags:
      - '*'
  pull_request:

permissions:
  actions: write
  contents: write

env:
  HAS_SECRETS: ${{ secrets.HAS_SECRETS }}

jobs:
  main:
    name: Continuous integration
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - run: docker system prune --all --force
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: camptocamp/initialise-gopass-summon-action@v2
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GOPASS_CI_GITHUB_TOKEN}}
        if: env.HAS_SECRETS == 'HAS_SECRETS'

      - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - run: python3 -m pip install --user --requirement=ci/requirements.txt

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: "pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\npre-commit-"
      - run: pre-commit run --all-files
        env:
          SKIP: helm-lock
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch || true
        if: failure()
      - uses: actions/upload-artifact@v4
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()
      - name: Print environment information
        run: c2cciutils-env

      - name: Install helm
        uses: azure/setup-helm@v4

      - run: helm dependency update .
      - run: helm lint .

      - name: Setup k3s/k3d
        run: c2cciutils-k8s-install

      - run: helm lint .
      - run: helm lint --values=tests/recommend.yaml .
      - run: helm lint --values=tests/full.yaml .

      - run: kubectl apply -f tests/expected.yaml
      - run: kubectl delete -f tests/expected.yaml || true

      - name: Install prometheus CRD
        run: |
          curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/jsonnet/prometheus-operator/podmonitors-crd.json --output /tmp/podmonitors-crd.json
          kubectl apply -f /tmp/podmonitors-crd.json

      - run: kubectl apply -f tests/full-expected.yaml
      - run:
          kubectl delete -f tests/full-expected.yaml || true

          # Install operators
      - id: scm-operator
        run: ci/get-version https://camptocamp.github.io/operator-shared-config-manager
      - run: helm repo add operator-shared-config-manager https://camptocamp.github.io/operator-shared-config-manager
      - run:
          helm template operator-shared-config-manager --set=env.ENVIRONMENT=test --set=crd.suffix=test --set=crd.shortSuffix=t
          --set=image.tag=${VERSION} --version=${VERSION} operator-shared-config-manager/operator-shared-config-manager | kubectl apply -f -
        env:
          VERSION: ${{steps.scm-operator.outputs.version}}
      - id: gh-wh-operator
        run: ci/get-version https://camptocamp.github.io/operator-github-webhook
      - run: helm repo add operator-github-webhook https://camptocamp.github.io/operator-github-webhook
      - run:
          helm template operator-github-webhook --set=env.ENVIRONMENT=test --set=crd.suffix=test --set=crd.shortSuffix=t
          --set=image.tag=${VERSION} --version=${VERSION} operator-github-webhook/operator-github-webhook | kubectl apply -f -
        env:
          VERSION: ${{steps.gh-wh-operator.outputs.version}}

      - name: Create the database
        run: c2cciutils-k8s-db --script=tests/db.sql
      - run:
          helm template test-redis --set=auth.enabled=false --set=replica.replicaCount=0 --set=master.persistence.enabled=false
          bitnami/redis | kubectl apply -f -

      - run: kubectl apply -f tests/recommend-expected.yaml
      - run: c2cciutils-k8s-wait
      - run: c2cciutils-k8s-logs
        if: always()
      - run: kubectl delete -f tests/recommend-expected.yaml || true

      - name: Clean the database
        run: c2cciutils-k8s-db --cleanup
        if: always()

      - name: Publish
        run: c2cciutils-publish

      - run: git diff --exit-code --patch > /tmp/dpkg-versions.patch || true
        if: failure()
      - uses: actions/upload-artifact@v4
        with:
          name: Update dpkg versions list.patch
          path: /tmp/dpkg-versions.patch
          retention-days: 1
        if: failure()
      - name: Trigger changelog workflow
        uses: actions/github-script@v7
        with:
          script: |-
            if (process.env.GITHUB_REF_TYPE == 'tag') {
                console.log('Trigger changelog');
                await github.rest.repos.createDispatchEvent({
                    owner: 'camptocamp',
                    repo: 'helm-geomapfish',
                    event_type: 'changelog',
                });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
