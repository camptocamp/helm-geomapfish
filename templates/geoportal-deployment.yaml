{{- $fullname := include "c2cgeoportal.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
{{- $service := "geoportal" }}
metadata:
  name: {{ $fullname }}-{{ $service }}
  labels:
    app: {{ template "c2cgeoportal.fullname" . }}
    chart: {{ template "c2cgeoportal.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    service: {{ $service }}
  {{- if .Values.openshift }}
  annotations:
    image.openshift.io/triggers: |
      [
        {{- if gt .Values.version 2.4 }}
        {{    template "c2cgeoportal.trigger" (dict "image" "config" "tag" .Values.image.tag "initContainer" "geoportal-config" "root" . ) }},
        {{- end }}
        {{ template "c2cgeoportal.trigger" (dict "image" "geoportal" "tag" .Values.image.tag "container" "geoportal" "root" . ) }}
      ]
  {{- end }}
spec:
  replicas: {{ .Values.geoportal.replicaCount }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "c2cgeoportal.fullname" . }}
      release: {{ .Release.Name }}
      service: {{ $service }}
  template:
    metadata:
      labels:
        app: {{ template "c2cgeoportal.fullname" . }}
        release: {{ .Release.Name }}
        service: {{ $service }}
    spec:
      {{- include "commonPodConfig" (dict "service" .Values.geoportal "affinitySelector" (dict "release" .Release.Name "service" $service) "root" .) | indent 6 }}
      {{- if gt .Values.version 2.4 }}
      initContainers:
        - name: geoportal-config
          args: ['bash', '-c', 'cp -a /etc/geomapfish/* /etc/geomapfish-volume/ && cp -a /etc/gunicorn/* /etc/gunicorn-volume/']
          {{- template "c2cgeoportal.config" . }}
          volumeMounts:
            - mountPath: /etc/geomapfish-volume
              name: geomapfish
            - mountPath: /etc/gunicorn-volume
              name: gunicorn
      {{- end }}
      containers:
        - name: geoportal
          {{- if .Values.openshift }}
          image: " "
          {{- else }}
          {{-   if .Values.geoportal.image }}
          image: "{{ .Values.geoportal.image }}"
          {{-   else }}
          image: "{{ .Values.image.repositoryPrefix }}-geoportal:{{ .Values.image.tag }}"
          {{-   end }}
          {{- end }}
          imagePullPolicy: {{ .Values.openshift | ternary "IfNotPresent" .Values.image.pullPolicy }}
          {{- if gt .Values.version 2.4 }}
          volumeMounts:
            - mountPath: /etc/geomapfish
              name: geomapfish
              readOnly: true
            - mountPath: /etc/gunicorn
              name: gunicorn
              readOnly: true
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: TINYOWS_URL
              value: "http://{{ $fullname }}-tinyows/"
            {{- if .Values.print.enabled }}
            - name: PRINT_URL
              value: "http://{{ $fullname }}-print/print/{{ .Values.print.application }}"
            {{- else if .Values.print.external }}
            - name: PRINT_URL
              value: {{ .Values.print.external | quote }}
            {{- end }}
            - name: AUTHTKT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $fullname }}
                  key: authtkt
            # Config env
            {{- include "c2cgeoportal.configEnv" . | indent 12}}
            # Geoportal env
            {{- range $name, $value := .Values.geoportal.env }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
            {{- end }}
            # c2cwsgiutils env
            {{- template "c2cwsgiutilsEnv" (dict "service" "geoportal" "root" .) }}
          livenessProbe:
            httpGet:
              path: "{{ .Values.geoportal.entrypoint }}c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "{{ .Values.geoportal.entrypoint }}c2c/health_check?max_level={{ .Values.geoportal.healthCheckLevel }}"
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 20
          {{- include "common.containerConfig" (dict "service" .Values.geoportal "root" .) | indent 10 }}
          securityContext:
            runAsNonRoot: true
            {{- if not .Values.openshift }}
            runAsUser: 33  # www-data
            {{- end }}
      {{- if gt .Values.version 2.4 }}
      volumes:
        - name: geomapfish
          emptyDir: {}
        - name: gunicorn
          emptyDir: {}
      {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
