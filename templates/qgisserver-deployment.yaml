{{- $fullname := include "c2cgeoportal.fullname" . -}}
{{- if .Values.qgisserver.enabled -}}
{{- $service := "qgisserver" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "c2cgeoportal.fullname" . }}-{{ $service }}
  labels:
    app: {{ template "c2cgeoportal.fullname" . }}
    chart: {{ template "c2cgeoportal.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    service: {{ $service }}
  {{- if .Values.openshift }}
  annotations:
    image.openshift.io/triggers: |
      [
          {{- if and .Values.sharedConfigManager.enabled .Values.sharedConfigManager.qgisserver }}
          {{    template "c2cgeoportal.trigger" (dict "image" "sharedconfigmanager" "tag" .Values.sharedConfigManager.image.tag "container" "qgisserver-config" "root" . ) }},
          {{- else }}
          {{    template "c2cgeoportal.trigger" (dict "image" "config" "tag" .Values.image.tag "initContainer" "qgisserver-config" "root" . ) }},
          {{- end }}
          {{- if .Values.qgisserver.image.tag }}
          {{ template "c2cgeoportal.trigger" (dict "image" "qgisserver" "tag" .Values.qgisserver.image.tag "container" "qgisserver" "root" . ) }}
          {{- else }}
          {{ template "c2cgeoportal.trigger" (dict "image" "qgisserver" "tag" (printf "gmf%g-qgis%s" .Values.version .Values.qgisserver.version ) "container" "qgisserver" "root" . ) }}
          {{- end }}
      ]
  {{- end }}
spec:
  replicas: {{ .Values.qgisserver.replicaCount }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "c2cgeoportal.fullname" . }}
      release: {{ .Release.Name }}
      service: {{ $service }}
  template:
    metadata:
      labels:
        app: {{ template "c2cgeoportal.fullname" . }}
        release: {{ .Release.Name }}
        service: {{ $service }}
    spec:
      {{- include "commonPodConfig" (dict "service" .Values.qgisserver "affinitySelector" (dict "release" .Release.Name "service" $service) "root" .) | indent 6 }}
      {{- if not (and .Values.sharedConfigManager.enabled .Values.sharedConfigManager.qgisserver) }}
      initContainers:
        - name: qgisserver-config
          args: ['bash', '-c', 'cp -a /etc/qgisserver/* /etc/qgisserver-volume/']
          volumeMounts:
            - mountPath: /etc/qgisserver-volume
              name: configs
          {{- template "c2cgeoportal.config" . }}
      {{- end }}
      containers:
        {{- if and .Values.sharedConfigManager.enabled .Values.sharedConfigManager.qgisserver }}
        - name: qgisserver-config
          {{- template "c2cgeoportal.sharedConfig" (dict "service" "qgisserver_config" "root" .) }}
            # Config env
            {{- include "c2cgeoportal.configEnv" . | indent 12 }}
            - name: TAG_FILTER
              value: qgisserver
            - name: API_BASE_URL
              value: http://{{ template "c2cgeoportal.fullname" . }}-shared-config/scm
          args: ['shared-config-slave']
          volumeMounts:
            - mountPath: /config/qgisserver
              name: configs
          {{- include "common.containerConfig" (dict "service" .Values.sharedConfigManager.slave "root" .) | indent 10 }}
        {{- end }}
        - name: qgisserver
          {{- if .Values.openshift }}
          image: " "
          {{- else }}
          image: {{ .Values.qgisserver.image.name }}:{{ .Values.qgisserver.image.tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.openshift | ternary "IfNotPresent" .Values.image.externalPullPolicy }}
          env:
            - name: MAX_PROCESSES
              value: "{{ .Values.qgisserver.parallelism }}"
            - name: MAX_REQUESTS_PER_PROCESS
              value: "500"
          {{- if .Values.c2c.catchSegV }}
            - name: QGIS_CATCH_SEGV
              value: "1"
            - name: SEGFAULT_SIGNALS
              value: "all"
          {{- end }}
            - name: QGIS_PROJECT_FILE
              value: {{ .Values.qgisserver.projectFile | quote}}
            - name: QGIS_CUSTOM_CONFIG_PATH
              value: /tmp
            - name: C2C_BROADCAST_PREFIX
              value: broadcast_geoportal{{ if .Values.redis.external.enabled }}{{ .Values.redis.external.db }}{{ end }}
            - name: C2C_REDIS_DB
              value: {{ .Values.redis.external.db | quote }}
            {{- if .Values.redis.external.sentinel }}
            - name: C2C_REDIS_SENTINELS
              value: {{ .Values.redis.external.host }}:{{ .Values.redis.external.port }}
            - name: C2C_REDIS_TIMEOUT
              value: {{ .Values.redis.external.timeout | quote }}
            - name: C2C_REDIS_SERVICENAME
              value: {{ .Values.redis.external.servicename }}
            {{- else }}
            - name: C2C_REDIS_URL
              value: {{ template "c2cgeoportal.redisUrl" . }}
            {{- end }}
          # DB env
          {{- include "c2cgeoportal.db" . | indent 12 }}
          # AWS cred env
          {{- include "c2cgeoportal.awscreds" (.Values.qgisserver.s3 | default .Values.s3) | indent 12 }}
          # Custom env
          {{- range $name, $value := .Values.qgisserver.env }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
          {{- end }}
          volumeMounts:
            - mountPath: /etc/qgisserver
              name: configs
              readOnly: false
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: {{ .Values.qgisserver.probe.readiness }}
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 300
          securityContext:
            runAsNonRoot: true
            {{- if not .Values.openshift }}
            runAsUser: 33  # www-data
            {{- end }}
          {{- include "common.containerConfig" (dict "service" .Values.qgisserver "root" .) | indent 10 }}
        - name: apache-exporter
          image: quay.io/lusitaniae/apache-exporter:v0.7.0
          #image: bitnami/apache-exporter:0.7.0
          imagePullPolicy: {{ .Values.openshift | ternary "IfNotPresent" .Values.image.externalPullPolicy }}
          args:
            - '--scrape_uri=http://{{ $fullname }}-qgisserver/server-status-remote?auto'
          ports:
            - name: prometheus
              containerPort: 9117
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: prometheus
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20
          securityContext:
            runAsNonRoot: true
            {{- if not .Values.openshift }}
            runAsUser: 33  # www-data
            {{- end }}
          {{- include "common.containerConfig" (dict "service" .Values.qgisserver.apache_exporter "root" .) | indent 10 }}
      volumes:
        - name: configs
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
{{- end -}}
