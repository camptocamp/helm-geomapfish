{{- $fullname := include "c2cgeoportal.fullname" . -}}
{{- if .Values.mapserver.enabled -}}
apiVersion: apps/v1
kind: Deployment
{{- $service := "mapserver" }}
metadata:
  name: {{ template "c2cgeoportal.fullname" . }}-{{ $service }}
  labels:
    app: {{ template "c2cgeoportal.fullname" . }}
    chart: {{ template "c2cgeoportal.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    service: {{ $service }}
  {{- if .Values.openshift }}
  annotations:
    image.openshift.io/triggers: |
      [
        {{- if and .Values.sharedConfigManager.enabled .Values.sharedConfigManager.mapserver }}
        {{    template "c2cgeoportal.trigger" (dict "image" "sharedconfigmanager" "tag" .Values.sharedConfigManager.image.tag "container" "mapserver-config" "root" . ) }},
        {{- else }}
        {{    template "c2cgeoportal.trigger" (dict "image" "config" "tag" .Values.image.tag "initContainer" "mapserver-config" "root" . ) }},
        {{- end }}
        {{ template "c2cgeoportal.trigger" (dict "image" "mapserver" "tag" .Values.mapserver.image.tag "container" "mapserver" "root" . ) }}
      ]
  {{- end }}
spec:
  replicas: {{ .Values.mapserver.replicaCount }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "c2cgeoportal.fullname" . }}
      release: {{ .Release.Name }}
      service: {{ $service }}
  template:
    metadata:
      labels:
        app: {{ template "c2cgeoportal.fullname" . }}
        release: {{ .Release.Name }}
        service: {{ $service }}
    spec:
      {{- include "commonPodConfig" (dict "service" .Values.mapserver "affinitySelector" (dict "release" .Release.Name "service" $service) "root" .) | indent 6 }}
      {{- if not (and .Values.sharedConfigManager.enabled .Values.sharedConfigManager.mapserver) }}
      initContainers:
        - name: mapserver-config
          args: ['bash', '-c', 'cp -a /etc/mapserver/* /etc/mapserver-volume/']
          volumeMounts:
            - mountPath: /etc/mapserver-volume
              name: configs
          {{- template "c2cgeoportal.config" . }}
      {{- end }}
      containers:
        {{- if and .Values.sharedConfigManager.enabled .Values.sharedConfigManager.mapserver }}
        - name: mapserver-config
          {{- template "c2cgeoportal.sharedConfig" (dict "service" "mapserver_config" "root" .) }}
            # Config env
            {{- include "c2cgeoportal.configEnv" . | indent 12 }}
            # Config env end
            - name: TAG_FILTER
              value: mapserver
            - name: API_BASE_URL
              value: http://{{ template "c2cgeoportal.fullname" . }}-shared-config/scm
          args: ['shared-config-slave']
          volumeMounts:
            - mountPath: /config/mapserver
              name: configs
          {{- include "common.containerConfig" (dict "service" .Values.sharedConfigManager.slave "root" .) | indent 10 }}
        {{- end }}
        - name: mapserver
          {{- if .Values.openshift }}
          image: " "
          {{- else }}
          image: {{ .Values.mapserver.image.name }}:{{ .Values.mapserver.image.tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.openshift | ternary "IfNotPresent" .Values.image.externalPullPolicy }}
          env:
            - name: PGOPTIONS
              value: "-c statement_timeout={{ .Values.postgresql.statementTimeout}}"
            - name: MAX_PROCESSES
              value: "{{ .Values.mapserver.parallelism }}"
            {{- if .Values.c2c.catchSegV }}
            - name: MAPSERVER_CATCH_SEGV
              value: "1"
            - name: SEGFAULT_SIGNALS
              value: "all"
            {{- end }}
            # AWS cred env
            {{- include "c2cgeoportal.awscreds" (.Values.mapserver.s3 | default .Values.s3) | indent 12 }}
            # Custom env
            {{- range $name, $value := .Values.mapserver.env }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
            {{- end }}
          command: ["/bin/bash"]
          args: ["/usr/local/bin/start-server"]
          volumeMounts:
            - mountPath: /etc/mapserver
              name: configs
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20
          securityContext:
            runAsNonRoot: true
            {{- if not .Values.openshift }}
            runAsUser: 33  # www-data
            {{- end }}
          {{- include "common.containerConfig" (dict "service" .Values.mapserver "root" .) | indent 10 }}
        - name: apache-exporter
          image: quay.io/lusitaniae/apache-exporter:v0.7.0
          #image: bitnami/apache-exporter:0.7.0
          imagePullPolicy: {{ .Values.openshift | ternary "IfNotPresent" .Values.image.externalPullPolicy }}
          args:
            - '--scrape_uri=http://{{ $fullname }}-mapserver/server-status-remote?auto'
          ports:
            - name: prometheus
              containerPort: 9117
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: prometheus
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20
          securityContext:
            runAsNonRoot: true
            {{- if not .Values.openshift }}
            runAsUser: 33  # www-data
            {{- end }}
          {{- include "common.containerConfig" (dict "service" .Values.mapserver.apache_exporter "root" .) | indent 10 }}
      volumes:
        - name: configs
          emptyDir: {}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
{{- end -}}
