{{- if .Values.ingress.useCache }}
{{- $entrypoint := .Values.geoportal.entrypoint -}}
{{- $fullName := include "c2cgeoportal.fullname" . -}}
{{- $be_prefix := replace "-" "_" $fullName }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "c2cgeoportal.fullname" . }}-varnish-routes
  labels:
    app: {{ template "c2cgeoportal.fullname" . }}
    chart: {{ template "c2cgeoportal.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    type: varnish-routes
data:
  {{$fullName}}_backends.vcl: |
    # {{ (index .Values.ingress.hosts 0).name }}
    # {{ (index .Values.ingress.hosts 0).host }}
    backend {{$be_prefix}}_geoportal {
      .host = "{{ template "c2cgeoportal.fullname" . }}-geoportal";
      .port = "80";
    }
    {{- if .Values.tilecloudchain.enabled }}
    backend {{$be_prefix}}_tilecloudchain {
      .host = "{{ template "c2cgeoportal.fullname" . }}-tilecloudchain";
      .port = "80";
    }
    {{- end }}
    {{- if .Values.sharedConfigManager.enabled }}
    backend {{$be_prefix}}_shared_config {
      .host = "{{ template "c2cgeoportal.fullname" . }}-shared-config";
      .port = "80";
    }
    {{- end }}
    {{- range $custom := $.Values.ingress.custom }}
    {{- range $path, $service := $custom }}
    backend {{$be_prefix}}_{{ replace "-" "_" $service }} {
      .host = "{{ $service }}";
      .port = "80";
    }
    {{- end }}
    {{- end }}


  {{$fullName}}_routes.vcl: |
    {{- range .Values.ingress.hosts }}
    if (req.http.Host == "{{ .host }}") {
      {{- if $.Values.c2c.profiler.enabled }}
      {{- if $.Values.tilecloudchain.enabled }}
      if (req.url ~ "^{{ $entrypoint }}{{ $.Values.c2c.profiler.pathPrefix }}tilecloudchain/.*") {
        set req.backend_hint = {{$be_prefix}}_tilecloudchain;
      } else
      {{- end }}
      if (req.url ~ "^{{ $entrypoint }}{{ $.Values.c2c.profiler.pathPrefix }}geoportal/.*") {
        set req.backend_hint = {{$be_prefix}}_geoportal;
      } else
      {{- end }}
      {{- if $.Values.tilecloudchain.enabled }}
      if (req.url ~ "^{{ $entrypoint }}tiles/.*") {
        set req.backend_hint = {{$be_prefix}}_tilecloudchain;
      } else
      {{- end }}
      {{- if $.Values.sharedConfigManager.enabled }}
      if (req.url ~ "^/scm/.*") {
        set req.backend_hint = {{$be_prefix}}_shared_config;
      } else
      {{- end }}
      {{- range $custom := $.Values.ingress.custom }}
      {{- range $path, $service := $custom }}
      if (req.url ~ "^{{ $path }}.*") {
        set req.backend_hint = {{$be_prefix}}_{{ replace "-" "_" $service }};
      } else
      {{- end }}
      {{- end }}
      if (req.url ~ "^{{ $entrypoint }}.*") {
        set req.backend_hint = {{$be_prefix}}_geoportal;
      }
    } else
    {{- end }}

  {{$fullName}}_backend_fetch.vcl: |
    {{- range .Values.ingress.hosts }}
    if (bereq.http.Host == "{{ .host }}") {
      set bereq.first_byte_timeout = {{ add $.Values.timeout 5 }}s;
    } else
    {{- end }}


  {{$fullName}}.vtc: |
    varnishtest "Varnish {{$fullName}}"

    server s_geoportal {
      rxreq
      expect req.url == "/"
      txresp -hdr "Content-Type: text/html; charset=utf-8" -body "<html></html>"

      rxreq
      expect req.url == "/gzip.html"
      txresp -hdr "Content-Type: text/html; charset=utf-8" -body "<html></html>"
    } -start

    {{- if .Values.tilecloudchain.enabled }}
    server s_tilecloudchain {
      rxreq
      expect req.url == "/tiles/toto.json"
      txresp -hdr "Content-Type: application/json; charset=utf-8" -body "{}"
    } -start
    {{- end }}

    {{- if .Values.sharedConfigManager.enabled }}
    server s_shared_config {
      rxreq
      expect req.url == "/scm/tutu"
      txresp -hdr "Content-Type: text/javascript; charset=utf-8" -body "var a=1;"
    } -start
    {{- end }}

    {{- range $custom := $.Values.ingress.custom }}
    {{- range $path, $service := $custom }}
    server s_{{ replace "-" "_" $service }} {
      rxreq
      expect req.url == "{{$path}}"
      txresp -hdr "Content-Type: text/javascript; charset=utf-8" -body "var a='{{$service}}';"
    } -start
    {{- end }}
    {{- end }}

    varnish v1 -vcl {
      backend {{$be_prefix}}_geoportal {
        .host = "${s_geoportal_addr}";
        .port = "${s_geoportal_port}";
      }

      {{- if .Values.tilecloudchain.enabled }}
      backend {{$be_prefix}}_tilecloudchain {
        .host = "${s_tilecloudchain_addr}";
        .port = "${s_tilecloudchain_port}";
      }
      {{- end }}

      {{- if .Values.sharedConfigManager.enabled }}
      backend {{$be_prefix}}_shared_config {
        .host = "${s_shared_config_addr}";
        .port = "${s_shared_config_port}";
      }
      {{- end }}

      {{- range $custom := $.Values.ingress.custom }}
      {{- range $path, $service := $custom }}
      backend {{$be_prefix}}_{{ replace "-" "_" $service }} {
        .host = "${s_{{ replace "-" "_" $service }}_addr}";
        .port = "${s_{{ replace "-" "_" $service }}_port}";
      }
      {{- end }}
      {{- end }}

      include "/etc/varnish/processing.vcl";
    } -start

    client c1 {
      txreq -url "/" -hdr "Host: {{ (index .Values.ingress.hosts 0).host }}"
      rxresp
      expect resp.http.via ~ "varnish"
      expect resp.status == 200
      expect resp.body == "<html></html>"

      txreq -url "/gzip.html" -hdr "Accept-Encoding: gzip" -hdr "Host: {{ (index .Values.ingress.hosts 0).host }}"
      rxresp
      expect resp.http.via ~ "varnish"
      expect resp.status == 200
      expect resp.http.content-encoding ~ "gzip"
      expect resp.http.vary ~ "Accept-Encoding"
      expect resp.http.x-cache == "MISS"
      gunzip
      expect resp.body == "<html></html>"

      txreq -url "/gzip.html" -hdr "Accept-Encoding: gzip" -hdr "Host: {{ (index .Values.ingress.hosts 0).host }}"
      rxresp
      expect resp.http.via ~ "varnish"
      expect resp.status == 200
      expect resp.http.content-encoding ~ "gzip"
      expect resp.http.vary ~ "Accept-Encoding"
      expect resp.http.x-cache == "HIT"
      gunzip
      expect resp.body == "<html></html>"

      {{- if .Values.tilecloudchain.enabled }}
      txreq -url "/tiles/toto.json" -hdr "Host: {{ (index .Values.ingress.hosts 0).host }}"
      rxresp
      expect resp.http.via ~ "varnish"
      expect resp.status == 200
      expect resp.body == "{}"
      {{- end }}

      {{- if .Values.sharedConfigManager.enabled }}
      txreq -url "/scm/tutu" -hdr "Host: {{ (index .Values.ingress.hosts 0).host }}"
      rxresp
      expect resp.http.via ~ "varnish"
      expect resp.status == 200
      expect resp.body == "var a=1;"
      {{- end }}

      {{- range $custom := $.Values.ingress.custom }}
      {{- range $path, $service := $custom }}
      txreq -url "{{$path}}" -hdr "Host: {{ (index $.Values.ingress.hosts 0).host }}"
      rxresp
      expect resp.http.via ~ "varnish"
      expect resp.status == 200
      expect resp.body == "var a='{{$service}}';"
      {{- end }}
      {{- end }}
    } -run
{{- end }}
