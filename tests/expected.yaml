---
# Source: geomapfish/charts/geoportal/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.11
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geomapfish/charts/mapserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-mapserver
  labels:
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mapserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geomapfish/charts/qgisserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-qgisserver
  labels:
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qgisserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geomapfish/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-geomapfish-env
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
data:
  CHART_NAME: geomapfish
  RELEASE_NAME: test
  RELEASE_NAMESPACE: default
  SENTRY_URL: https://sentry-key@o330647.ingest.sentry.io/sentry-project
  TILECLOUDCHAIN_INTERNAL_URL: http://test-geomapfish-tilecloudchain/
  GEOPORTAL_INTERNAL_URL: http://test-geomapfish-geoportal/
  MAPSERVER_URL: http://test-geomapfish-mapserver/
  QGISSERVER_URL: http://test-geomapfish-qgisserver/
  GEOPORTAL_INTERNAL_HOST: test-geomapfish-geoportal
  TILECLOUDCHAIN_INTERNAL_HOST: test-geomapfish-tilecloudchain
  VISIBLE_WEB_HOST: chart-example.local
  VISIBLE_ENTRY_POINT: /
  VISIBLE_WEB_HOST_RE_ESCAPED: "chart-example\\.local"
  VISIBLE_ENTRY_POINT_RE_ESCAPED: "/"

  PGSCHEMA: "main"
  PGSCHEMA_STATIC: "main_static"
  PGOPTIONS: "-c statement_timeout=30000"

  REDIS_SENTINELS: ":6379"
  REDIS_DB: "0"
  REDIS_SERVICENAME: "mymaster"
  REDIS_TIMEOUT: "10"
  REDIS_GEOPORTAL_BROADCAST_PREFIX:  broadcast_geoportal_0

  MAPSERVER_DATA_SUBSELECT: >
    SELECT ST_Collect(ra.area)
    FROM main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
    WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id
    AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
  MAPSERVER_DATA_NOAREA_SUBSELECT: >
    SELECT rra.role_id
    FROM main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
    WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id
    AND lra.layer_id = la.id AND la.name =
  MAPSERVER_JOIN_TABLES: >
    main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
  MAPSERVER_JOIN_WHERE: >
    rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND
    lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
  GEOPORTAL_BROADCAST_PREFIX: broadcast_geoportal_0

  GEOPORTAL_CLIENT_RELEASE: "latest"
  ALEMBIC_CLIENT_RELEASE: "latest"
---
# Source: geomapfish/charts/geoportal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.11
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/geoportal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoportal-prometheus
  labels:
    helm.sh/chart: geoportal-0.1.11
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/mapserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-mapserver
  labels:
    helm.sh/chart: mapserver-0.1.20
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: "true"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 9117
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/qgisserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-qgisserver
  labels:
    helm.sh/chart: qgisserver-0.1.20
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: "true"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 9117
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/geoportal/templates/alembic-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal-alembic
  labels:
    helm.sh/chart: geoportal-0.1.11
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: alembic
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: alembic
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: alembic
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      initContainers:
        - name: alembic
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - bash
            - -c
            - alembic --name=static upgrade head
      containers:
        - name: sleep
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "busybox:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - tail
            - -f
            - /dev/null
---
# Source: geomapfish/charts/geoportal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.11
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - main
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - test
              - key: app.kubernetes.io/name
                operator: In
                values:
                - geoportal
            topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/<project>-config:latest"
          imagePullPolicy: IfNotPresent
          env:
              - name: "VISIBLE_ENTRY_POINT"
                value: "/"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['bash', '-c', 'cp -a /etc/geomapfish/* /etc/geomapfish-volume/']
          volumeMounts:
            - mountPath: /etc/geomapfish-volume
              name: configs
      containers:
        - name: geoportal
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}

          volumeMounts:
            - mountPath: /etc/geomapfish
              name: configs
              readOnly: true

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20

      volumes:
        - name: configs
          emptyDir: {}
---
# Source: geomapfish/charts/geoportal/templates/tools-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal-tools
  labels:
    helm.sh/chart: geoportal-0.1.11
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tools
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tools
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: tools
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      containers:
        - name: tools
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfish-tools:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
           - sleep
           - infinity
---
# Source: geomapfish/charts/mapserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mapserver
  labels:
    helm.sh/chart: mapserver-0.1.20
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mapserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mapserver
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
    spec:

      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      initContainers:
        - name: config
          securityContext:
            {}
          image: "camptocamp/<project>-config:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['bash', '-c', 'cp -a /etc/mapserver/* /etc/config-volume/']
          volumeMounts:
            - mountPath: /etc/config-volume
              name: configs
      containers:
        - name: apache
          securityContext:
            {}
          image: "camptocamp/mapserver:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          volumeMounts:
            - mountPath: /etc/mapserver
              name: configs
              readOnly: false
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
        - name: apache-exporter
          securityContext:
            {}
          image: "quay.io/lusitaniae/apache-exporter:"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - '--scrape_uri=http://test-mapserver/server-status-remote?auto'
          ports:
            - name: prometheus
              containerPort: 9117
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: prometheus
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20
      volumes:
        - name: configs
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
---
# Source: geomapfish/charts/qgisserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-qgisserver
  labels:
    helm.sh/chart: qgisserver-0.1.20
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qgisserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qgisserver
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
    spec:

      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      initContainers:
        - name: config
          securityContext:
            {}
          image: "camptocamp/<project>-config:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['bash', '-c', 'cp -a /etc/qgisserver/* /etc/config-volume/']
          volumeMounts:
            - mountPath: /etc/config-volume
              name: configs
      containers:
        - name: apache
          securityContext:
            {}
          image: "camptocamp/mapserver:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          volumeMounts:
            - mountPath: /etc/qgisserver
              name: configs
              readOnly: false
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 20
            timeoutSeconds: 10
        - name: apache-exporter
          securityContext:
            {}
          image: "quay.io/lusitaniae/apache-exporter:"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - '--scrape_uri=http://test-qgisserver/server-status-remote?auto'
          ports:
            - name: prometheus
              containerPort: 9117
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: prometheus
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20
      volumes:
        - name: configs
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
