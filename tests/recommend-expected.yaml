---
# Source: geomapfish/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-geomapfish-geoportal
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: geoportal
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geomapfish
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: geoportal
---
# Source: geomapfish/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-geomapfish-env
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: env
data:
  RELEASE_NAME: test
  GEOPORTAL_IMAGE_TAG: "2.7"
  ALEMBIC_IMAGE_TAG: "2.7"
  TOOLS_IMAGE_TAG: "2.7"
  CONFIG_IMAGE_TAG: "prod-2-7"
  STATD_IMAGE_TAG: "latest"
  BUSYBOX_IMAGE_TAG: "latest"
---
# Source: geomapfish/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geomapfish-geoportal
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: geoportal
    prometheus: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: geoportal
---
# Source: geomapfish/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geomapfish-geoportal-prometheus
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: geoportal
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: geoportal
---
# Source: geomapfish/templates/tiles-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geomapfish-tiles
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tiles
spec:
  type: ExternalName
  externalName: service.namespace.svc.cluster.local
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
---
# Source: geomapfish/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geomapfish-geoportal
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: geoportal
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geomapfish
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: geoportal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geomapfish
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: geoportal
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - main
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - test
              - key: app.kubernetes.io/name
                operator: In
                values:
                - geomapfish
            topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishdemo-config:prod-2-7"
          imagePullPolicy: IfNotPresent
          env:
            - name: "PGDATABASE"
              value: "postgres"
            - name: "PGHOST"
              value: "test-pg-postgresql"
            - name: "PGHOST_SLAVE"
              value: "test-pg-postgresql"
            - name: "PGPASSWORD"
              value: "mySuperTestingPassword"
            - name: "PGPORT"
              value: "5432"
            - name: "PGPORT_SLAVE"
              value: "5432"
            - name: "PGSCHEMA"
              value: "main"
            - name: "PGSCHEMA_STATIC"
              value: "main_static"
            - name: "PGUSER"
              value: "postgres"
            - name: "POSTGRESQL_STATEMENT_TIMEOUT"
              value: "30000"
            - name: "RELEASE_NAME"
              valueFrom:
                configMapKeyRef:
                  name: "test-geomapfish-env"
                  key: "RELEASE_NAME"
            - name: "VISIBLE_ENTRY_POINT"
              value: "/"
            - name: "VISIBLE_WEB_HOST"
              value: "example.com"
            - name: "VISIBLE_WEB_PROTOCOL"
              value: "https"
            - name: "GEOPORTAL_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-geoportal/"
            - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              value: "SELECT rra.role_id FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_DATA_SUBSELECT"
              value: "SELECT ST_Collect(ra.area) FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_JOIN_TABLES"
              value: "$(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la\n"
            - name: "MAPSERVER_JOIN_WHERE"
              value: "rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "PGOPTIONS"
              value: "-c statement_timeout=$(POSTGRESQL_STATEMENT_TIMEOUT)"
            - name: "QGISSERVER_URL"
              value: "http://$(RELEASE_NAME)-qgisserver/"
            - name: "TILECLOUDCHAIN_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-tilecloudchain/"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - bash
            - -c
            - cp -a /etc/geomapfish/* /etc/geomapfish-volume/ &&
              cp -a /usr/local/tomcat/webapps/ROOT/print-apps/* /etc/print-volume/
          volumeMounts:
            - mountPath: /etc/geomapfish-volume
              name: geomapfish
            - mountPath: /etc/print-volume
              name: print
      containers:
        - name: geoportal
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:2.7"
          imagePullPolicy: IfNotPresent
          env:
            - name: "AUTHTKT_SECRET"
              value: "secret012345678901234567890123456789012345678901234567890123456789"
            - name: "C2C_DEBUG_VIEW_ENABLED"
              value: "1"
            - name: "C2C_LOG_VIEW_ENABLED"
              value: "1"
            - name: "C2C_REQUESTS_DEFAULT_TIMEOUT"
              value: "30"
            - name: "C2C_SQL_PROFILER_ENABLED"
              value: "1"
            - name: "GUNICORN_ACCESS_LOG_FORMAT"
              value: "%(H)s %({Host}i)s %(m)s %(U)s?%(q)s \"%(f)s\" \"%(a)s\" %(s)s %(B)s %(D)s %(p)s"
            - name: "GUNICORN_LIMIT_REQUEST_LINE"
              value: "8190"
            - name: "GUNICORN_MAX_REQUESTS"
              value: "2000"
            - name: "GUNICORN_MAX_REQUESTS_JITTER"
              value: "200"
            - name: "GUNICORN_THREADS"
              value: "10"
            - name: "GUNICORN_TIMEOUT"
              value: "30"
            - name: "GUNICORN_WORKERS"
              value: "2"
            - name: "LOG_TYPE"
              value: "console"
            - name: "PGDATABASE"
              value: "postgres"
            - name: "PGHOST"
              value: "test-pg-postgresql"
            - name: "PGHOST_SLAVE"
              value: "test-pg-postgresql"
            - name: "PGPASSWORD"
              value: "mySuperTestingPassword"
            - name: "PGPORT"
              value: "5432"
            - name: "PGPORT_SLAVE"
              value: "5432"
            - name: "PGSCHEMA"
              value: "main"
            - name: "PGSCHEMA_STATIC"
              value: "main_static"
            - name: "PGUSER"
              value: "postgres"
            - name: "POSTGRESQL_STATEMENT_TIMEOUT"
              value: "30000"
            - name: "RELEASE_NAME"
              valueFrom:
                configMapKeyRef:
                  name: "test-geomapfish-env"
                  key: "RELEASE_NAME"
            - name: "SENTRY_CLIENT_RELEASE"
              valueFrom:
                configMapKeyRef:
                  name: "test-geomapfish-env"
                  key: "GEOPORTAL_IMAGE_TAG"
            - name: "SENTRY_TAG_SERVICE"
              value: "geoportal"
            - name: "VISIBLE_ENTRY_POINT"
              value: "/"
            - name: "VISIBLE_WEB_HOST"
              value: "example.com"
            - name: "VISIBLE_WEB_PROTOCOL"
              value: "https"
            - name: "GEOPORTAL_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-geoportal/"
            - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              value: "SELECT rra.role_id FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_DATA_SUBSELECT"
              value: "SELECT ST_Collect(ra.area) FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_JOIN_TABLES"
              value: "$(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la\n"
            - name: "MAPSERVER_JOIN_WHERE"
              value: "rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "PGOPTIONS"
              value: "-c statement_timeout=$(POSTGRESQL_STATEMENT_TIMEOUT)"
            - name: "QGISSERVER_URL"
              value: "http://$(RELEASE_NAME)-qgisserver/"
            - name: "TILECLOUDCHAIN_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-tilecloudchain/"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 88m
              memory: 271Mi

          volumeMounts:
            - mountPath: /etc/geomapfish
              name: geomapfish
              readOnly: true
            - mountPath: /usr/local/tomcat/webapps/ROOT/print-apps
              name: print
              readOnly: true

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20

      volumes:
        - name: geomapfish
          emptyDir: {}
        - name: print
          emptyDir: {}
---
# Source: geomapfish/templates/tools-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geomapfish-tools
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tools
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geomapfish
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tools
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geomapfish
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: tools
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      containers:
        - name: tools
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfish-tools:2.7"
          imagePullPolicy: IfNotPresent
          env:
            - name: "PGDATABASE"
              value: "postgres"
            - name: "PGHOST"
              value: "test-pg-postgresql"
            - name: "PGHOST_SLAVE"
              value: "test-pg-postgresql"
            - name: "PGPASSWORD"
              value: "mySuperTestingPassword"
            - name: "PGPORT"
              value: "5432"
            - name: "PGPORT_SLAVE"
              value: "5432"
            - name: "PGSCHEMA"
              value: "main"
            - name: "PGSCHEMA_STATIC"
              value: "main_static"
            - name: "PGUSER"
              value: "postgres"
            - name: "POSTGRESQL_STATEMENT_TIMEOUT"
              value: "30000"
            - name: "RELEASE_NAME"
              valueFrom:
                configMapKeyRef:
                  name: "test-geomapfish-env"
                  key: "RELEASE_NAME"
            - name: "VISIBLE_ENTRY_POINT"
              value: "/"
            - name: "VISIBLE_WEB_HOST"
              value: "example.com"
            - name: "VISIBLE_WEB_PROTOCOL"
              value: "https"
            - name: "GEOPORTAL_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-geoportal/"
            - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              value: "SELECT rra.role_id FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_DATA_SUBSELECT"
              value: "SELECT ST_Collect(ra.area) FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_JOIN_TABLES"
              value: "$(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la\n"
            - name: "MAPSERVER_JOIN_WHERE"
              value: "rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "PGOPTIONS"
              value: "-c statement_timeout=$(POSTGRESQL_STATEMENT_TIMEOUT)"
            - name: "QGISSERVER_URL"
              value: "http://$(RELEASE_NAME)-qgisserver/"
            - name: "TILECLOUDCHAIN_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-tilecloudchain/"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 1m
              memory: 100Mi
          args:
           - sleep
           - infinity
---
# Source: geomapfish/templates/alembic-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: test-geomapfish-alembic
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: alembic
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geomapfish
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: alembic
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      restartPolicy: Never
      containers:
        - name: alembic
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:2.7"
          imagePullPolicy: IfNotPresent
          env:
            - name: "C2C_DEBUG_VIEW_ENABLED"
              value: "1"
            - name: "C2C_LOG_VIEW_ENABLED"
              value: "1"
            - name: "C2C_REQUESTS_DEFAULT_TIMEOUT"
              value: "30"
            - name: "C2C_SQL_PROFILER_ENABLED"
              value: "1"
            - name: "GUNICORN_ACCESS_LOG_FORMAT"
              value: "%(H)s %({Host}i)s %(m)s %(U)s?%(q)s \"%(f)s\" \"%(a)s\" %(s)s %(B)s %(D)s %(p)s"
            - name: "GUNICORN_LIMIT_REQUEST_LINE"
              value: "8190"
            - name: "GUNICORN_MAX_REQUESTS"
              value: "2000"
            - name: "GUNICORN_MAX_REQUESTS_JITTER"
              value: "200"
            - name: "GUNICORN_THREADS"
              value: "10"
            - name: "GUNICORN_TIMEOUT"
              value: "30"
            - name: "GUNICORN_WORKERS"
              value: "2"
            - name: "LOG_TYPE"
              value: "console"
            - name: "PGDATABASE"
              value: "postgres"
            - name: "PGHOST"
              value: "test-pg-postgresql"
            - name: "PGHOST_SLAVE"
              value: "test-pg-postgresql"
            - name: "PGPASSWORD"
              value: "mySuperTestingPassword"
            - name: "PGPORT"
              value: "5432"
            - name: "PGPORT_SLAVE"
              value: "5432"
            - name: "PGSCHEMA"
              value: "main"
            - name: "PGSCHEMA_STATIC"
              value: "main_static"
            - name: "PGUSER"
              value: "postgres"
            - name: "POSTGRESQL_STATEMENT_TIMEOUT"
              value: "30000"
            - name: "RELEASE_NAME"
              valueFrom:
                configMapKeyRef:
                  name: "test-geomapfish-env"
                  key: "RELEASE_NAME"
            - name: "SENTRY_CLIENT_RELEASE"
              valueFrom:
                configMapKeyRef:
                  name: "test-geomapfish-env"
                  key: "ALEMBIC_IMAGE_TAG"
            - name: "SENTRY_TAG_SERVICE"
              value: "alembic"
            - name: "VISIBLE_ENTRY_POINT"
              value: "/"
            - name: "VISIBLE_WEB_HOST"
              value: "example.com"
            - name: "VISIBLE_WEB_PROTOCOL"
              value: "https"
            - name: "GEOPORTAL_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-geoportal/"
            - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              value: "SELECT rra.role_id FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_DATA_SUBSELECT"
              value: "SELECT ST_Collect(ra.area) FROM $(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "MAPSERVER_JOIN_TABLES"
              value: "$(PGSCHEMA).restrictionarea AS ra, $(PGSCHEMA).role_restrictionarea AS rra, $(PGSCHEMA).layer_restrictionarea AS lra, $(PGSCHEMA).treeitem AS la\n"
            - name: "MAPSERVER_JOIN_WHERE"
              value: "rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =\n"
            - name: "PGOPTIONS"
              value: "-c statement_timeout=$(POSTGRESQL_STATEMENT_TIMEOUT)"
            - name: "QGISSERVER_URL"
              value: "http://$(RELEASE_NAME)-qgisserver/"
            - name: "TILECLOUDCHAIN_INTERNAL_URL"
              value: "http://$(RELEASE_NAME)-tilecloudchain/"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 88m
              memory: 171Mi
          args:
            - bash
            - -c
            - alembic --name=main upgrade head && alembic --name=static upgrade head
---
# Source: geomapfish/templates/github-webhooks.yaml
apiVersion: camptocamp.com/v2
kind: GitHubWebhook
metadata:
  name: test-geomapfish-test-prin
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: test-print
spec:
  environment: test
  repository: camptocamp/test
  url: https://config.mutualized.example.com/1/refresh/test-print/admin1234
  contentType: json
---
# Source: geomapfish/templates/github-webhooks.yaml
apiVersion: camptocamp.com/v2
kind: GitHubWebhook
metadata:
  name: test-geomapfish-test-tile
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: test-tilecloudchain
spec:
  environment: test
  repository: camptocamp/test
  url: https://config.mutualized.example.com/1/refresh/test-tilecloudchain/admin1234
  contentType: json
---
# Source: geomapfish/templates/mutualize-redirect.yaml
apiVersion: camptocamp.com/v2
kind: SharedConfigSource
metadata:
  name: test-geomapfish-redirect-hosts
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: redirect-hosts
    mutualize-redirect-hosts: 'true'
spec:
  name: test-geomapfish-redirect-hosts
  environment: test
  content:
   example.com: example.com
---
# Source: geomapfish/templates/mutualize-sharedconfig.yaml
apiVersion: camptocamp.com/v2
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-prin
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: test-print
    mutualize-sharedconfig: 'true'
spec:
  name: test-print
  environment: test
  content:
      type: git
      repo: git@github.com:camptocamp/test.git
      branch: master
      key: admin1234
      sub_dir: print/print-apps/test
      tags:
        - print
      template_engines:
        - type: shell
          environment_variables: true
          data:
            TEST: test
---
# Source: geomapfish/templates/mutualize-sharedconfig.yaml
apiVersion: camptocamp.com/v2
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-tile
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: test-tilecloudchain
    mutualize-sharedconfig: 'true'
spec:
  name: test-tilecloudchain
  environment: test
  content:
      type: git
      repo: git@github.com:camptocamp/test.git
      branch: master
      key: admin1234
      sub_dir: tilegeneration
      tags:
        - tilecloudchain
      template_engines:
        - type: shell
          environment_variables: true
          data:
            TEST: test
---
# Source: geomapfish/templates/mutualize-tilecloudchain.yaml
apiVersion: camptocamp.com/v2
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-tile-hosts-main
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: test-tilecloudchain
    mutualize-tilecloudchain-hosts: 'true'
spec:
  name: test-tilecloudchain-main
  environment: test
  content:
    demo.camptocamp.com: /etc/tilecloudchain-configs/test-tilecloudchain/config.yaml
---
# Source: geomapfish/templates/mutualize-tilecloudchain.yaml
apiVersion: camptocamp.com/v2
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-tile-hosts-test
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: test-tilecloudchain
    mutualize-tilecloudchain-hosts: 'true'
spec:
  name: test-tilecloudchain-test
  environment: test
  content:
    demo-test.camptocamp.com: /etc/tilecloudchain-configs/test-tilecloudchain/config.yaml
