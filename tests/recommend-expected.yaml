---
# Source: geomapfish/charts/geoportal/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.13
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geomapfish/charts/mapserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-mapserver
  labels:
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mapserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geomapfish/charts/qgisserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-qgisserver
  labels:
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qgisserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geomapfish/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-geomapfish-env
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
data:
  CHART_NAME: geomapfish
  RELEASE_NAME: test
  RELEASE_NAMESPACE: default
  SENTRY_URL: https://sentry-key@o330647.ingest.sentry.io/sentry-project
  TILECLOUDCHAIN_INTERNAL_URL: http://test-geomapfish-tilecloudchain/
  GEOPORTAL_INTERNAL_URL: http://test-geomapfish-geoportal/
  MAPSERVER_URL: http://test-geomapfish-mapserver/
  QGISSERVER_URL: http://test-geomapfish-qgisserver/
  GEOPORTAL_INTERNAL_HOST: test-geomapfish-geoportal
  TILECLOUDCHAIN_INTERNAL_HOST: test-geomapfish-tilecloudchain
  VISIBLE_WEB_HOST: chart-example.local
  VISIBLE_ENTRY_POINT: /
  VISIBLE_WEB_HOST_RE_ESCAPED: "chart-example\\.local"
  VISIBLE_ENTRY_POINT_RE_ESCAPED: "/"

  PGSCHEMA: "main"
  PGSCHEMA_STATIC: "main_static"
  PGOPTIONS: "-c statement_timeout=30000"

  REDIS_SENTINELS: "redis:6379"
  REDIS_DB: "0"
  REDIS_SERVICENAME: "mymaster"
  REDIS_TIMEOUT: "10"
  REDIS_GEOPORTAL_BROADCAST_PREFIX:  broadcast_geoportal_0

  MAPSERVER_DATA_SUBSELECT: >
    SELECT ST_Collect(ra.area)
    FROM main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
    WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id
    AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
  MAPSERVER_DATA_NOAREA_SUBSELECT: >
    SELECT rra.role_id
    FROM main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
    WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id
    AND lra.layer_id = la.id AND la.name =
  MAPSERVER_JOIN_TABLES: >
    main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
  MAPSERVER_JOIN_WHERE: >
    rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND
    lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
  GEOPORTAL_BROADCAST_PREFIX: broadcast_geoportal_0

  GEOPORTAL_CLIENT_RELEASE: "2.7"
  ALEMBIC_CLIENT_RELEASE: "2.7"
---
# Source: geomapfish/charts/geoportal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.13
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/geoportal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoportal-prometheus
  labels:
    helm.sh/chart: geoportal-0.1.13
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/mapserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-mapserver
  labels:
    helm.sh/chart: mapserver-0.1.21
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: "true"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 9117
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/qgisserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-qgisserver
  labels:
    helm.sh/chart: qgisserver-0.1.21
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: "true"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 9117
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/charts/geoportal/templates/alembic-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal-alembic
  labels:
    helm.sh/chart: geoportal-0.1.13
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: alembic
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: alembic
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: alembic
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      initContainers:
        - name: alembic
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:2.7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "C2C_DEBUG_VIEW_ENABLED"
                value: "1"
              - name: "C2C_LOG_VIEW_ENABLED"
                value: "1"
              - name: "C2C_REQUESTS_DEFAULT_TIMEOUT"
                value: "30"
              - name: "C2C_SQL_PROFILER_ENABLED"
                value: "1"
              - name: "GEOPORTAL_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "GEOPORTAL_INTERNAL_URL"
              - name: "GUNICORN_ACCESS_LOG_FORMAT"
                value: "%(H)s %({Host}i)s %(m)s %(U)s?%(q)s \"%(f)s\" \"%(a)s\" %(s)s %(B)s %(D)s %(p)s"
              - name: "GUNICORN_LIMIT_REQUEST_LINE"
                value: "8190"
              - name: "GUNICORN_MAX_REQUESTS"
                value: "2000"
              - name: "GUNICORN_MAX_REQUESTS_JITTER"
                value: "200"
              - name: "GUNICORN_THREADS"
                value: "10"
              - name: "GUNICORN_TIMEOUT"
                value: "30"
              - name: "GUNICORN_WORKERS"
                value: "2"
              - name: "LOG_TYPE"
                value: "console"
              - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              - name: "MAPSERVER_DATA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_SUBSELECT"
              - name: "MAPSERVER_JOIN_TABLES"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_TABLES"
              - name: "MAPSERVER_JOIN_WHERE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_WHERE"
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGOPTIONS"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGOPTIONS"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA"
              - name: "PGSCHEMA_STATIC"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA_STATIC"
              - name: "PGUSER"
                value: "postgres"
              - name: "QGISSERVER_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "QGISSERVER_URL"
              - name: "SENTRY_CLIENT_RELEASE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "ALEMBIC_CLIENT_RELEASE"
              - name: "SENTRY_TAG_SERVICE"
                value: "alembic"
              - name: "TILECLOUDCHAIN_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "TILECLOUDCHAIN_INTERNAL_URL"
              - name: "VISIBLE_ENTRY_POINT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_ENTRY_POINT"
              - name: "VISIBLE_WEB_HOST"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_WEB_HOST"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 88m
              memory: 171Mi
          args:
            - bash
            - -c
            - alembic --name=main upgrade head && alembic --name=static upgrade head
      containers:
        - name: sleep
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "busybox:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - tail
            - -f
            - /dev/null
---
# Source: geomapfish/charts/geoportal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.13
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - main
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - test
              - key: app.kubernetes.io/name
                operator: In
                values:
                - geoportal
            topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishdemo-config:prod-2-7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "GEOPORTAL_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "GEOPORTAL_INTERNAL_URL"
              - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              - name: "MAPSERVER_DATA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_SUBSELECT"
              - name: "MAPSERVER_JOIN_TABLES"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_TABLES"
              - name: "MAPSERVER_JOIN_WHERE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_WHERE"
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGOPTIONS"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGOPTIONS"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA"
              - name: "PGSCHEMA_STATIC"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA_STATIC"
              - name: "PGUSER"
                value: "postgres"
              - name: "QGISSERVER_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "QGISSERVER_URL"
              - name: "TILECLOUDCHAIN_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "TILECLOUDCHAIN_INTERNAL_URL"
              - name: "VISIBLE_ENTRY_POINT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_ENTRY_POINT"
              - name: "VISIBLE_WEB_HOST"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_WEB_HOST"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['bash', '-c', 'cp -a /etc/geomapfish/* /etc/geomapfish-volume/']
          volumeMounts:
            - mountPath: /etc/geomapfish-volume
              name: configs
      containers:
        - name: geoportal
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:2.7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "AUTHTKT_SECRET"
                value: "secret012345678901234567890123456789012345678901234567890123456789"
              - name: "C2C_DEBUG_VIEW_ENABLED"
                value: "1"
              - name: "C2C_LOG_VIEW_ENABLED"
                value: "1"
              - name: "C2C_REQUESTS_DEFAULT_TIMEOUT"
                value: "30"
              - name: "C2C_SQL_PROFILER_ENABLED"
                value: "1"
              - name: "GEOPORTAL_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "GEOPORTAL_INTERNAL_URL"
              - name: "GUNICORN_ACCESS_LOG_FORMAT"
                value: "%(H)s %({Host}i)s %(m)s %(U)s?%(q)s \"%(f)s\" \"%(a)s\" %(s)s %(B)s %(D)s %(p)s"
              - name: "GUNICORN_LIMIT_REQUEST_LINE"
                value: "8190"
              - name: "GUNICORN_MAX_REQUESTS"
                value: "2000"
              - name: "GUNICORN_MAX_REQUESTS_JITTER"
                value: "200"
              - name: "GUNICORN_THREADS"
                value: "10"
              - name: "GUNICORN_TIMEOUT"
                value: "30"
              - name: "GUNICORN_WORKERS"
                value: "2"
              - name: "LOG_TYPE"
                value: "console"
              - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              - name: "MAPSERVER_DATA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_SUBSELECT"
              - name: "MAPSERVER_JOIN_TABLES"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_TABLES"
              - name: "MAPSERVER_JOIN_WHERE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_WHERE"
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGOPTIONS"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGOPTIONS"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA"
              - name: "PGSCHEMA_STATIC"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA_STATIC"
              - name: "PGUSER"
                value: "postgres"
              - name: "QGISSERVER_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "QGISSERVER_URL"
              - name: "SENTRY_CLIENT_RELEASE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "GEOPORTAL_CLIENT_RELEASE"
              - name: "SENTRY_TAG_SERVICE"
                value: "geoportal"
              - name: "TILECLOUDCHAIN_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "TILECLOUDCHAIN_INTERNAL_URL"
              - name: "VISIBLE_ENTRY_POINT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_ENTRY_POINT"
              - name: "VISIBLE_WEB_HOST"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_WEB_HOST"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 88m
              memory: 271Mi

          volumeMounts:
            - mountPath: /etc/geomapfish
              name: configs
              readOnly: true

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20

      volumes:
        - name: configs
          emptyDir: {}
---
# Source: geomapfish/charts/geoportal/templates/tools-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal-tools
  labels:
    helm.sh/chart: geoportal-0.1.13
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tools
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tools
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: tools
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      containers:
        - name: tools
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfish-tools:2.7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "GEOPORTAL_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "GEOPORTAL_INTERNAL_URL"
              - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              - name: "MAPSERVER_DATA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_SUBSELECT"
              - name: "MAPSERVER_JOIN_TABLES"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_TABLES"
              - name: "MAPSERVER_JOIN_WHERE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_WHERE"
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGOPTIONS"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGOPTIONS"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA"
              - name: "PGSCHEMA_STATIC"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA_STATIC"
              - name: "PGUSER"
                value: "postgres"
              - name: "QGISSERVER_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "QGISSERVER_URL"
              - name: "TILECLOUDCHAIN_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "TILECLOUDCHAIN_INTERNAL_URL"
              - name: "VISIBLE_ENTRY_POINT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_ENTRY_POINT"
              - name: "VISIBLE_WEB_HOST"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_WEB_HOST"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 1m
              memory: 100Mi
          args:
           - sleep
           - infinity
---
# Source: geomapfish/charts/mapserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mapserver
  labels:
    helm.sh/chart: mapserver-0.1.21
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mapserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mapserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mapserver
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      initContainers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishdemo-config:prod-2-7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "GEOPORTAL_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "GEOPORTAL_INTERNAL_URL"
              - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              - name: "MAPSERVER_DATA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_SUBSELECT"
              - name: "MAPSERVER_JOIN_TABLES"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_TABLES"
              - name: "MAPSERVER_JOIN_WHERE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_WHERE"
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGOPTIONS"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGOPTIONS"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA"
              - name: "PGSCHEMA_STATIC"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA_STATIC"
              - name: "PGUSER"
                value: "postgres"
              - name: "QGISSERVER_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "QGISSERVER_URL"
              - name: "TILECLOUDCHAIN_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "TILECLOUDCHAIN_INTERNAL_URL"
              - name: "VISIBLE_ENTRY_POINT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_ENTRY_POINT"
              - name: "VISIBLE_WEB_HOST"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_WEB_HOST"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['bash', '-c', 'cp -a /etc/mapserver/* /etc/config-volume/']
          volumeMounts:
            - mountPath: /etc/config-volume
              name: configs
      containers:
        - name: apache
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/mapserver:7.6"
          imagePullPolicy: IfNotPresent
          env:
              - name: "MAPSERVER_CATCH_SEGV"
                value: "1"
              - name: "MAX_PROCESSES"
                value: "1"
              - name: "PGOPTIONS"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGOPTIONS"
              - name: "SEGFAULT_SIGNALS"
                value: "all"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 560Mi
            requests:
              cpu: 4m
              memory: 110.5Mi
          volumeMounts:
            - mountPath: /etc/mapserver
              name: configs
              readOnly: false
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 2
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 2
            periodSeconds: 20
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 2
            periodSeconds: 20
            timeoutSeconds: 10
        - name: apache-exporter
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "quay.io/lusitaniae/apache-exporter:v0.10.1"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 20Mi
            requests:
              cpu: 1m
              memory: 10Mi
          args:
            - '--scrape_uri=http://test-mapserver/server-status-remote?auto'
          ports:
            - name: prometheus
              containerPort: 9117
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: prometheus
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20
      volumes:
        - name: configs
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
---
# Source: geomapfish/charts/qgisserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-qgisserver
  labels:
    helm.sh/chart: qgisserver-0.1.21
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgisserver
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qgisserver
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qgisserver
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      initContainers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishdemo-config:prod-2-7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "GEOPORTAL_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "GEOPORTAL_INTERNAL_URL"
              - name: "MAPSERVER_DATA_NOAREA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_NOAREA_SUBSELECT"
              - name: "MAPSERVER_DATA_SUBSELECT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_DATA_SUBSELECT"
              - name: "MAPSERVER_JOIN_TABLES"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_TABLES"
              - name: "MAPSERVER_JOIN_WHERE"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "MAPSERVER_JOIN_WHERE"
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGOPTIONS"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGOPTIONS"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA"
              - name: "PGSCHEMA_STATIC"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "PGSCHEMA_STATIC"
              - name: "PGUSER"
                value: "postgres"
              - name: "QGISSERVER_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "QGISSERVER_URL"
              - name: "TILECLOUDCHAIN_INTERNAL_URL"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "TILECLOUDCHAIN_INTERNAL_URL"
              - name: "VISIBLE_ENTRY_POINT"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_ENTRY_POINT"
              - name: "VISIBLE_WEB_HOST"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "VISIBLE_WEB_HOST"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['bash', '-c', 'cp -a /etc/qgisserver/* /etc/config-volume/']
          volumeMounts:
            - mountPath: /etc/config-volume
              name: configs
      containers:
        - name: apache
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfish-qgisserver:gmf2.7-qgismaster"
          imagePullPolicy: IfNotPresent
          env:
              - name: "C2C_BROADCAST_PREFIX"
                valueFrom:
                  configMapKeyRef:
                    name: "test-geomapfish-env"
                    key: "REDIS_GEOPORTAL_BROADCAST_PREFIX"
              - name: "C2C_REDIS_TIMEOUT"
                value: "30"
              - name: "C2C_REDIS_URL"
                value: "redis://test-redis-master/1"
              - name: "FCGID_IO_TIMEOUT"
                value: "120"
              - name: "GEOMAPFISH_ACCESSCONTROL_BASE_URL"
                value: "http://test-qgis"
              - name: "MAX_PROCESSES"
                value: "1"
              - name: "MAX_REQUESTS_PER_PROCESS"
                value: "500"
              - name: "QGIS_CUSTOM_CONFIG_PATH"
                value: "/tmp"
              - name: "QGIS_SERVER_IGNORE_BAD_LAYERS"
                value: "TRUE"
              - name: "QGIS_SERVER_LOG_LEVEL"
                value: "0"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 1300Mi
            requests:
              cpu: 12.5m
              memory: 113Mi
          volumeMounts:
            - mountPath: /etc/qgisserver
              name: configs
              readOnly: false
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /?SERVICE=WMS&REQUEST=GetCapabilities&MAP=/etc/qgisserver/project.qgz
              port: http
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 300
          readinessProbe:
            httpGet:
              path: /?SERVICE=WMS&REQUEST=GetCapabilities&MAP=/etc/qgisserver/project.qgz
              port: http
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 300
          startupProbe:
            httpGet:
              path: /?SERVICE=WMS&REQUEST=GetCapabilities&MAP=/etc/qgisserver/project.qgz
              port: http
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 300
        - name: apache-exporter
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "quay.io/lusitaniae/apache-exporter:v0.10.1"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              memory: 20Mi
            requests:
              cpu: 1m
              memory: 10Mi
          args:
            - '--scrape_uri=http://test-qgisserver/server-status-remote?auto'
          ports:
            - name: prometheus
              containerPort: 9117
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: prometheus
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 20
      volumes:
        - name: configs
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
---
# Source: geomapfish/templates/github-webhooks.yaml
apiVersion: camptocamp.com/v1
kind: GitHubWebhook
metadata:
  name: test-geomapfish-test-print
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  repository: camptocamp/test
  url: https://config.mutualized.example.com/1/refresh/test-print-print/
  contentType: json
---
# Source: geomapfish/templates/github-webhooks.yaml
apiVersion: camptocamp.com/v1
kind: GitHubWebhook
metadata:
  name: test-geomapfish-test-tilecloudchain
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  repository: camptocamp/test
  url: https://config.mutualized.example.com/1/refresh/test-tilecloudchain-print/
  contentType: json
---
# Source: geomapfish/templates/mutualize-sharedconfig.yaml
apiVersion: camptocamp.com/v1
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-print
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    mutualize-sharedconfig: 'true'
spec:
  name: test-print
  content:
      type: git
      repo: git@github.com:camptocamp/test.git
      branch: master
      key: admin1234
      sub_dir: print/print-apps/test
      tags:
        - print
      template_engines:
        - type: shell
          environment_variables: true
          data:
            TEST: test
---
# Source: geomapfish/templates/mutualize-sharedconfig.yaml
apiVersion: camptocamp.com/v1
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-tilecloudchain
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    mutualize-sharedconfig: 'true'
spec:
  name: test-tilecloudchain
  content:
      type: git
      repo: git@github.com:camptocamp/test.git
      branch: master
      key: admin1234
      sub_dir: tilegeneration
      tags:
        - tilecloudchain
      template_engines:
        - type: shell
          environment_variables: true
          data:
            TEST: test
---
# Source: geomapfish/templates/mutualize-tilecloudchain.yaml
apiVersion: camptocamp.com/v1
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-tilecloudchain-hosts-main
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    mutualize-tilecloudchain-hosts: 'true'
spec:
  name: test-tilecloudchain-main
  content:
    demo.camptocamp.com: /etc/tilecloudchain-configs/test-tilecloudchain/config.yaml
---
# Source: geomapfish/templates/mutualize-tilecloudchain.yaml
apiVersion: camptocamp.com/v1
kind: SharedConfigSource
metadata:
  name: test-geomapfish-test-tilecloudchain-hosts-test
  labels:
    helm.sh/chart: geomapfish-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    mutualize-tilecloudchain-hosts: 'true'
spec:
  name: test-tilecloudchain-test
  content:
    demo-test.camptocamp.com: /etc/tilecloudchain-configs/test-tilecloudchain/config.yaml
