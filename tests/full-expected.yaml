---
# Source: geomapfish/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-geomapfish
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geomapfish
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geomapfish/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: full
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-geomapfish-env
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
data:
  CHART_NAME: geomapfish
  RELEASE_NAME: test
  RELEASE_NAMESPACE: default
  SENTRY_URL: https://sentry-key@o330647.ingest.sentry.io/sentry-project
  TILECLOUDCHAIN_INTERNAL_URL: http://test-geomapfish-tilecloudchain/
  GEOPORTAL_INTERNAL_URL: http://test-geomapfish-geoportal/
  MAPSERVER_URL: http://test-geomapfish-mapserver/
  QGISSERVER_URL: http://test-geomapfish-qgisserver/
  GEOPORTAL_INTERNAL_HOST: test-geomapfish-geoportal
  TILECLOUDCHAIN_INTERNAL_HOST: test-geomapfish-tilecloudchain
  VISIBLE_ENTRY_POINT: /
  VISIBLE_ENTRY_POINT_RE_ESCAPED: "/"
  VISIBLE_WEB_HOST: gmf.local
  VISIBLE_WEB_HOST_RE_ESCAPED: "gmf\\.local"
  PGSCHEMA: "main"
  PGSCHEMA_STATIC: "main_static"
  PGOPTIONS: "-c statement_timeout=30000"

  REDIS_SENTINELS: ":6379"
  REDIS_DB: "0"
  REDIS_SERVICENAME: "mymaster"
  REDIS_TIMEOUT: "10"
  REDIS_GEOPORTAL_BROADCAST_PREFIX:  broadcast_geoportal_0

  MAPSERVER_DATA_SUBSELECT: >
    SELECT ST_Collect(ra.area)
    FROM main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
    WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id
    AND lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
  MAPSERVER_DATA_NOAREA_SUBSELECT: >
    SELECT rra.role_id
    FROM main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
    WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id
    AND lra.layer_id = la.id AND la.name =
  MAPSERVER_JOIN_TABLES: >
    main.restrictionarea AS ra,
    main.role_restrictionarea AS rra,
    main.layer_restrictionarea AS lra,
    main.treeitem AS la
  MAPSERVER_JOIN_WHERE: >
    rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND
    lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name =
  GEOPORTAL_BROADCAST_PREFIX: broadcast_geoportal_0

  GEOPORTAL_CLIENT_RELEASE: "latest"
  ALEMBIC_CLIENT_RELEASE: "latest"
---
# Source: geomapfish/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geomapfish
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geomapfish-prometheus
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geomapfish/templates/tiles-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geomapfish-tiles
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  type: ExternalName
  externalName: service.namespace.svc.cluster.local
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
---
# Source: geomapfish/templates/alembic-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geomapfish-alembic
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: alembic
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geomapfish
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: alembic
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geomapfish
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: alembic
        foo: bar1
    spec:
      serviceAccountName: full
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      initContainers:
        - name: alembic
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - bash
            - -c
            - alembic --name=static upgrade head
      containers:
        - name: sleep
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "busybox:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - tail
            - -f
            - /dev/null
---
# Source: geomapfish/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geomapfish
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geomapfish
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geomapfish
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
        foo: bar0
    spec:
      serviceAccountName: full
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - main
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - test
              - key: app.kubernetes.io/name
                operator: In
                values:
                - geomapfish
            topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/<project>-config:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - bash
            - -c
            - cp -a /etc/geomapfish/* /etc/geomapfish-volume/ &&
              cp -a /usr/local/tomcat/webapps/ROOT/print-apps/* /etc/print-volume/
          volumeMounts:
            - mountPath: /etc/geomapfish-volume
              name: geomapfish
            - mountPath: /etc/print-volume
              name: print
      containers:
        - name: geoportal
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}

          volumeMounts:
            - mountPath: /etc/geomapfish
              name: geomapfish
              readOnly: true
            - mountPath: /usr/local/tomcat/webapps/ROOT/print-apps
              name: print
              readOnly: true

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20

      volumes:
        - name: geomapfish
          emptyDir: {}
        - name: print
          emptyDir: {}
---
# Source: geomapfish/templates/tools-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geomapfish-tools
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tools
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geomapfish
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tools
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geomapfish
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: tools
        foo: bar2
    spec:
      serviceAccountName: full
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      containers:
        - name: tools
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfish-tools:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
           - sleep
           - infinity
---
# Source: geomapfish/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-geomapfish-main
  labels:
    helm.sh/chart: geomapfish
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geomapfish
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  tls:
    - hosts:
        - gmf.local
      secretName: mytls
  rules:
    - host: gmf.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: test-geomapfish
                port:
                  number: 80
          - path: "/custom/"
            pathType: Prefix
            backend:
              service:
                name: geomapfish-env-version-custom-feedback
                port:
                  number: 80
